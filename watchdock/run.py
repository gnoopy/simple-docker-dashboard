#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b3 on Thu Mar  8 01:09:42 2018
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import subprocess
import shlex
import threading
import time
from wx.lib.pubsub import pub
from threading import Thread
import wx.lib.agw.pyprogress as PP
import re
import platform
import shelve


class ProgressThread(Thread):
    """Test Worker Thread Class."""
    
    def __init__(self):
        """Init Worker Thread Class."""
        Thread.__init__(self)
        self.start()  # start the thread

    def run(self):
        """Run Worker Thread."""
        wx.MilliSleep(100)
        pub.sendMessage("update", msg="")


class MyProgressDialog(wx.lib.agw.pyprogress.PyProgress):
    """"""
    
    def __init__(self, act_msg):
        """Constructor"""
        wx.lib.agw.pyprogress.PyProgress.__init__(self, None, -1, "Command Execution",
        act_msg,
        agwStyle=wx.PD_APP_MODAL)
        self.SetGaugeSteps(50)
        self.SetGaugeBackground(wx.WHITE)
        self.SetGaugeProportion(0.2)
        self.SetFirstGradientColour(wx.TheColourDatabase.FindColour("white"))
        self.SetSecondGradientColour(wx.TheColourDatabase.FindColour("grey"))
        self.SetSize(300, self.GetSize()[1])
        self.stopNow = False
        # create a pubsub listener
        pub.subscribe(self.updateProgress, "update")
    
    def updateProgress(self, msg):
        """
        Update the progress bar
        """
        if msg == "-1":
            self.stopNow = True
            wx.MilliSleep(50)
            self.Hide()
            self.Destroy()
            wx.SafeYield()
            wx.GetApp().GetTopWindow().Raise()
        else:
            keepGoing = True
            while keepGoing:
                wx.MilliSleep(30)
                if self.stopNow:
                    break
                keepGoing = self.UpdatePulse()


class WatchdockFrame(wx.Frame):

    def set_test(self, testing=False):
        self.testing = testing
        if self.testing:
            self.mockdata = shelve.open('./tests/mockdata.json')
        self.panel_1.SetBackgroundColour(wx.YELLOW)
        self.refresh()

    def __init__(self, *args, **kwds):
        self.mockdata = None
        self.testing = False
        self.font_name = "Menlo"
        if "Darwin" in platform.platform():
            self.font_name = "Monaco"
        elif "Ubuntu" in platform.platform():
            self.font_name = "Monospace"
        elif "Widows" in platform.platform():
            self.font_name = "Tahoma"
        self.vmids=[]
        self.cmd_cont_info=""
        self.cmd_imgs_info =""
        self.cmd_df_info=""
        # begin wxGlade: WatchdockFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.FRAME_NO_TASKBAR
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1024, 840))
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.chc_vgt_ids = wx.Choice(self.panel_1, wx.ID_ANY, choices=["Host"])
        self.btn_refresh = wx.Button(self.panel_1, wx.ID_ANY, "refresh")
        self.btn_stop = wx.Button(self.panel_1, wx.ID_ANY, "stop")
        self.btn_restart = wx.Button(self.panel_1, wx.ID_ANY, "restart")
        self.btn_start = wx.Button(self.panel_1, wx.ID_ANY, "start")
        self.btn_save = wx.Button(self.panel_1, wx.ID_ANY, "save...")
        self.btn_del = wx.Button(self.panel_1, wx.ID_ANY, "delete")
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3DSASH | wx.SP_LIVE_UPDATE)
        self.pnl_container = wx.Panel(self.window_1, wx.ID_ANY)
        self.lbl_cont_header = wx.StaticText(self.pnl_container, wx.ID_ANY, "Waiting for docker container  information...")
        self.window_2 = wx.SplitterWindow(self.pnl_container, wx.ID_ANY, style=wx.SP_3DSASH | wx.SP_LIVE_UPDATE)
        self.lst_containers = wx.ListBox(self.window_2, wx.ID_ANY, choices=[])
        self.txt_details = wx.TextCtrl(self.window_2, wx.ID_ANY, "\n\n\n", style=wx.TE_DONTWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
        self.pnl_images = wx.Panel(self.window_1, wx.ID_ANY)
        self.window_3 = wx.SplitterWindow(self.pnl_images, wx.ID_ANY, style=wx.SP_3DSASH | wx.SP_LIVE_UPDATE)
        self.pnl_img = wx.Panel(self.window_3, wx.ID_ANY)
        self.lbl_img_header = wx.StaticText(self.pnl_img, wx.ID_ANY, "Waiting for docker image information...")
        self.lst_images = wx.ListBox(self.pnl_img, wx.ID_ANY, choices=[])
        self.pnl_imghst = wx.Panel(self.window_3, wx.ID_ANY)
        self.lbl_images_hst = wx.StaticText(self.pnl_imghst, wx.ID_ANY, "")
        self.lst_images_hst = wx.ListBox(self.pnl_imghst, wx.ID_ANY, choices=[])
        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.txt_system = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.OnChoice, self.chc_vgt_ids)
        self.Bind(wx.EVT_BUTTON, self.OnClickedRefresh, self.btn_refresh)
        self.Bind(wx.EVT_BUTTON, self.OnClickedStop, self.btn_stop)
        self.Bind(wx.EVT_BUTTON, self.OnClickedRestart, self.btn_restart)
        self.Bind(wx.EVT_BUTTON, self.OnClickedStart, self.btn_start)
        self.Bind(wx.EVT_BUTTON, self.OnClickedSave, self.btn_save)
        self.Bind(wx.EVT_BUTTON, self.OnclickedDelete, self.btn_del)
        self.Bind(wx.EVT_LISTBOX, self.onListBox, self.lst_containers)
        self.Bind(wx.EVT_LISTBOX, self.onImgListBox, self.lst_images)
        self.Bind(wx.EVT_LISTBOX, self.onImgHistBox, self.lst_images_hst)
        # end wxGlade
        self.refresh()
        

    def __set_properties(self):
        # begin wxGlade: WatchdockFrame.__set_properties
        self.SetTitle("Watchdock")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./watchdock/logo.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, self.font_name))
        self.chc_vgt_ids.SetMinSize((80, 23))
        self.chc_vgt_ids.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.chc_vgt_ids.SetToolTipString("Select vagrant vm ID")
        self.chc_vgt_ids.SetSelection(0)
        self.btn_refresh.SetMinSize((60, -1))
        self.btn_refresh.SetToolTipString("update all information from docker")
        self.btn_stop.SetMinSize((60, -1))
        self.btn_stop.SetToolTipString("Stop selected container")
        self.btn_stop.Enable(False)
        self.btn_restart.SetMinSize((60, -1))
        self.btn_restart.SetToolTipString("Restart selected container")
        self.btn_restart.Enable(False)
        self.btn_start.SetMinSize((60, -1))
        self.btn_start.SetToolTipString("Start selected container or image")
        self.btn_start.Enable(False)
        self.btn_save.SetMinSize((60, -1))
        self.btn_save.SetToolTipString("commit selected container \nto default image or other image")
        self.btn_save.Enable(False)
        self.btn_del.SetMinSize((60, -1))
        self.btn_del.SetToolTipString("Delete selected image")
        self.btn_del.Enable(False)
        self.lbl_cont_header.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.lst_containers.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.txt_details.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.window_2.SetMinimumPaneSize(20)
        self.pnl_container.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.lbl_img_header.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.lst_images.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
       
        self.lst_images_hst.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.window_3.SetMinimumPaneSize(20)
        self.pnl_images.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.window_1.SetMinimumPaneSize(20)
        self.txt_system.SetMinSize((200, 120))
        self.txt_system.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: WatchdockFrame.__do_layout
        sizer_4 = wx.FlexGridSizer(3, 1, 0, 0)
        self.sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, "System"), wx.VERTICAL)
        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self.pnl_images, wx.ID_ANY, "Images"), wx.VERTICAL)
        self.sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self.pnl_container, wx.ID_ANY, "Containers"), wx.VERTICAL)
        self.sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "Commands"), wx.HORIZONTAL)
        self.sizer_5.Add(self.chc_vgt_ids, 0, 0, 0)
        self.sizer_5.Add((10, 20), 0, 0, 0)
        self.sizer_5.Add(self.btn_refresh, 0, wx.ALL, 1)
        self.sizer_5.Add((10, 18), 0, 0, 0)
        self.sizer_5.Add(self.btn_stop, 0, wx.ALL, 1)
        self.sizer_5.Add(self.btn_restart, 0, wx.ALL, 1)
        self.sizer_5.Add(self.btn_start, 0, wx.ALL, 1)
        self.sizer_5.Add((10, 20), 0, 0, 0)
        self.sizer_5.Add(self.btn_save, 0, 0, 0)
        self.sizer_5.Add(self.btn_del, 0, wx.ALL, 1)
        self.sizer_5.Add((0, 0), 0, 0, 0)
        self.sizer_5.Add((0, 0), 0, 0, 0)
        self.sizer_5.Add((0, 0), 0, 0, 0)
        self.sizer_5.Add((0, 0), 0, 0, 0)
        self.panel_1.SetSizer(self.sizer_5)
        sizer_4.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_8.Add(self.lbl_cont_header, 0, wx.EXPAND, 0)
        self.window_2.SplitHorizontally(self.lst_containers, self.txt_details)
        sizer_8.Add(self.window_2, 1, wx.EXPAND, 0)
        self.pnl_container.SetSizer(sizer_8)
        sizer_1.Add(self.lbl_img_header, 0, 0, 0)
        sizer_1.Add(self.lst_images, 1, wx.EXPAND, 0)
        self.pnl_img.SetSizer(sizer_1)
        self.sizer_2.Add(self.lbl_images_hst, 0, 0, 0)
        self.sizer_2.Add(self.lst_images_hst, 1, wx.EXPAND, 0)
        self.pnl_imghst.SetSizer(self.sizer_2)
        self.window_3.SplitVertically(self.pnl_img, self.pnl_imghst)
        sizer_7.Add(self.window_3, 1, wx.EXPAND, 0)
        self.pnl_images.SetSizer(sizer_7)
        self.window_1.SplitHorizontally(self.pnl_container, self.pnl_images)
        sizer_4.Add(self.window_1, 1, wx.EXPAND, 0)
        lbl_dockersys = wx.StaticText(self.panel_2, wx.ID_ANY, "Waiting for docker system  information...")
        lbl_dockersys.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, self.font_name))
        self.sizer_6.Add(lbl_dockersys, 0, wx.EXPAND, 0)
        self.sizer_6.Add(self.txt_system, 1, wx.EXPAND, 0)
        self.panel_2.SetSizer(self.sizer_6)
        sizer_4.Add(self.panel_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        sizer_4.AddGrowableRow(1)
        sizer_4.AddGrowableCol(0)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnChoice(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        print("Event handler 'OnChoice' not implemented!")
        #TODO: Add vagrant docker commands https://www.vagrantup.com/docs/cli/ssh.html
        self.refresh()
        print("event ==>",str(event))
        event.Skip()

    def OnClickedRefresh(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        self.refresh()
        # btn = event.GetEventObject().GetLabel()
        # print "Label of pressed button = ", btn
        print("event ==>",str(event))

    def OnClickedStop(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        ProgressThread()
        dlg = MyProgressDialog("Stopping container... ")
        threading.Thread(target=self.stop, args=[self.cont_id]).start()

    def OnClickedRestart(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        ProgressThread()
        dlg = MyProgressDialog("ReStarting container... ")
        threading.Thread(target=self.restart, args=[self.cont_id]).start()
        # self.restart(self.cont_id)

    def OnClickedStart(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        ProgressThread()
        dlg = MyProgressDialog("Starting container... ")
        threading.Thread(target=self.start, args=[self.cont_id]).start()
        # self.start(self.cont_id)

    def OnClickedSave(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        print("Event handler 'OnClickedSave' not implemented!")
        img_tag=self.container_line[20:57].strip()
        dlg = wx.TextEntryDialog(self, "You are trying to save the container '%s' \n to the image '%s' \n\n Please enter commit message"%(self.cont_id,img_tag)
                    ,'Save container change','quick save', style= wx.ICON_QUESTION | wx.TE_MULTILINE|wx.OK|wx.CANCEL)
        # dlg.SetValue("quick save")
        dlg.CenterOnParent()
        result = dlg.ShowModal()
        if result == wx.ID_OK:
            msg = dlg.GetValue()
            print('You entered: %s\n' % msg)
            cmd="docker container commit -m '"+msg+"' "+self.cont_id+" "+img_tag
            self.run_cmd_sync(cmd)
            self.refresh()
        else:
            print('You canceled')
        dlg.Destroy()

    def OnclickedDelete(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        self.run_cmd_sync('docker image rm '+self.img_id)
        self.refresh()
        self.btn_del.Disable()
        print("event ==>",str(event))

    def get_img_id(self, img_line):
        self.img_id = img_line[46:58]
        return self.img_id
    
    def get_vagrant_vmids(self):
        sout = self.run_cmd_sync("vagrant global-status")
        print("get_vagrant_vmids",sout)
        ids = ['Host']
        if " no active Vagrant environments" in sout or sout is "":
            return ids
        else:
            lines = sout.splitlines()
            for line in lines[2:]:
                if "running" in line:
                    ids.append(line[0:7])
            return ids

    def get_img_history_str(self, id):
        str_history = self.run_cmd_sync('docker image history '+self.img_id+'')
        # lines = str_history.splitlines()
        return str_history

    def stop(self, id):
        self.run_cmd_sync('docker container stop '+self.cont_id)
        self.refresh()

    def restart(self, id):
        self.run_cmd_sync('docker container restart '+self.cont_id)
        self.refresh()

    def start(self, id):
        self.run_cmd_sync('docker container start '+self.cont_id)
        self.refresh()

    def refresh(self):
        tmp_index = self.chc_vgt_ids.GetSelection()
        old_vmid_str = self.chc_vgt_ids.GetString(tmp_index)
        self.vmids = self.get_vagrant_vmids()
        print("old_vmid_str",old_vmid_str," ===>", "vmids",self.vmids )
        self.chc_vgt_ids.SetItems(self.vmids)
        sel = self.chc_vgt_ids.FindString(old_vmid_str)
        self.chc_vgt_ids.SetSelection(sel)


        self.cont_id = None
        sout = self.run_cmd_sync('docker container ls -a')
        if "Cannot connect to the Docker daemon" in sout or " the docker daemon is not running"  in sout:
            dlg = wx.MessageDialog(parent=None, message="Please run the docker service before run Simple Docker Dashboard"
            , caption="Error", style=wx.OK|wx.ICON_EXCLAMATION)
            dlg.ShowModal()
            dlg.Destroy()
            # exit()
        if self.cmd_cont_info != sout:
            lines = sout.splitlines()
            self.lbl_cont_header.SetLabel(lines[0])
            self.lst_containers.SetItems(lines[1:])
            self.txt_details.Clear()
            self.btn_start.Disable()
            self.btn_restart.Disable()
            self.btn_stop.Disable()
            self.cmd_cont_info=sout

        sout = self.run_cmd_sync('docker images')
        if self.cmd_imgs_info != sout:
            self.cmd_imgs_info=sout
            lines = sout.splitlines()
            self.lbl_img_header.SetLabel(lines[0])
            self.lst_images.SetItems(lines[1:])
            # self.lst_images.SetSelection(0)
            if self.lst_images.GetSelection() is not wx.NOT_FOUND:
                imgid=self.get_img_id(self.lst_images.GetStringSelection())
                sout=self.get_img_history_str(imgid)
                lines = sout.splitlines()
                self.lst_images_hst.SetItems(lines[1:])
            else:
                self.lst_images_hst.SetItems([])
            self.btn_del.Disable()

        sout = self.run_cmd_sync('docker system df')
        if self.cmd_df_info != sout:
            self.txt_system.SetValue(sout)
            self.cmd_df_info=sout

        pub.sendMessage("update", msg="-1")
        # wx.CallAfter(pub.sendMessage, "update", msg="-1")

    def onListBox(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        print("event ==>",str(event.GetSelection()))
        print("event ==>",str(event.GetString()))

        self.container_line = event.GetEventObject().GetStringSelection()
        self.cont_id = self.container_line[0:12] #0:12
        print("CONTAINER LINE",self.container_line)
        print("CONTAINER ID",self.cont_id)

        top = self.run_cmd_sync('docker container top '+self.cont_id)+"\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
        logs = self.run_cmd_sync('docker container logs '+self.cont_id+'')
        ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
        logs = ansi_escape.sub('', logs)

        self.txt_details.SetValue(self.container_line+"\n"+top+logs)
        if "Up" in self.container_line and "Exited (" not in self.container_line:
            self.btn_stop.Enable()
            self.btn_restart.Enable()
            self.btn_save.Enable()
        else:
            self.btn_stop.Disable()
            self.btn_restart.Disable()
            self.btn_start.Enable()
            self.btn_save.Disable()

    def onImgListBox(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        img_line = event.GetEventObject().GetStringSelection()
        self.img_id = img_line[46:58]
        print("img id :"+str(self.img_id)+"-----------------")
        str_history = self.run_cmd_sync('docker image history '+self.img_id+'')
        if str_history is not None:
            lines = str_history.splitlines()
            self.lbl_images_hst.SetLabel(lines[0])
            self.lst_images_hst.SetItems(lines[1:])
        self.btn_del.Enable()
        print("event ==>",str(event))

    def onImgHistBox(self, event):  # wxGlade: WatchdockFrame.<event_handler>
        print("Event handler 'onImgHistBox' not implemented!")
        print("event ==>",str(event))
        event.Skip()

    def wrap_vagrant_cmd(self,cmd_str):
        if len(self.vmids) >= 2 and self.chc_vgt_ids.GetSelection() > 0:
            cmd_str = 'vagrant ssh -c "'+cmd_str+'" '+self.chc_vgt_ids.GetStringSelection()
        return cmd_str

    def run_cmd_sync(self, command):
        if not command.strip().startswith("vagrant"):
            command=self.wrap_vagrant_cmd(command)
        print("command",command)
        
        stdout=""
        if self.testing:
            stdout=self.mockdata[command]
        else:
            try:
                process = subprocess.Popen(shlex.split(command.encode('ascii','ignore')), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                tup = process.communicate()
                stdout = tup[0]+tup[1]
            except:
                return "" 
        if command.strip().startswith("vagrant"): #wrapped command
            regex = r'Connection to [0-9\.].* closed\.\s'
            stdout = re.sub(regex,'', stdout,0)
        ret=stdout.replace("\r","")

        # temporal use for test data record
        # testdata = shelve.open('./tests/mockdata.json')
        # testdata[command]=ret
        # testdata.close()
        return ret

# end of class WatchdockFrame

class WatchdockApp(wx.App):
    def OnInit(self):
        self.frame = WatchdockFrame(None, wx.ID_ANY, "")
        # self.frame.set_test(False)
        self.SetTopWindow(self.frame)
        self.frame.Show()
        
        return True

# end of class WatchdockApp

if __name__ == "__main__":
    app = WatchdockApp(0)
    app.MainLoop()
